name: Release
on:
  push:
    branches: [ main ]
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Rodar WorkFlow Manualmente'     
        required: true
        default: 'warning'
      tags:
        description: 'Insira a TAG para o cen√°rio'

jobs:
  Gradle:
    runs-on: ubuntu-latest
    steps:
    - name: checkout code
      uses: actions/checkout@v2
    - name: setup jdk
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: config git
      run: git config --global user.email "workflow@klocktecnologia.com" && git config --global user.name "WorkFlow Agent"

    - name: Generate versions
      uses: HardNorth/github-version-generate@v1.1.1
      env:
       working-directory: ./api
      with:
        version-source: file
        version-file: ./api/gradle.properties
        version-file-extraction-pattern: '(?<=version=).+'

    - name: Make Gradle executable
      working-directory: ./api
      run: chmod +x ./gradlew

    - name: Build Release with Gradle
      working-directory: ./api
      id: release
      run: |
        ./gradlew build -Prelease.useAutomaticVersion=true \
        -Prelease.releaseVersion=${{ env.RELEASE_VERSION }} \
        -Prelease.newVersion=${{ env.NEXT_VERSION }}
  

    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ./api
        build-args: |
          TAG=${{env.RELEASE_VERSION}}
        push: true
        tags: "ejklock/app:${{env.RELEASE_VERSION}}"
  
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        release_name: Release ${{ env.RELEASE_VERSION }}
        body: ${{ steps.readChangelogEntry.outputs.log_entry }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: "./api/build/libs/api-${{env.RELEASE_VERSION}}.jar"
        asset_name: "api-${{env.RELEASE_VERSION}}.jar"
        asset_content_type: application/zip

